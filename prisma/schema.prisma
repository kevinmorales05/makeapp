// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int     @unique
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  favoriteIds    String[]

  accounts Account[]
  profile  Profile?

  // posts   Post[]
  // ratings Rating[]
  // listings     Listing[]
  // reservations Reservation[]
}

model Account {
  id                Int     @id @default(autoincrement())
  // userId            String  
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  // user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @@unique([provider, providerAccountId])
}

model Product {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(200)
  description  String
  imageSrc     String
  cost         Float
  promoCost    Float
  bestSeller   Boolean  @default(false)
  kit          Boolean  @default(false)
  weight       String
  farmacState  String
  presentation String
  category     String
  subCategory  String
  color        String   @default("default")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  // categoryId Int
}

model Category {
  id            Int    @id @default(autoincrement())
  title         String
  subCategories Json
  // Product       Product[]
}

// model Articles {
//   id            Int    @id @default(autoincrement())
//   title         String
//   content         String
//   // a relation much to much with category and articles
//   // Product       Product[]
// }

// model Listing {
//   id            String   @id @default(auto()) @map("_id") @db.ObjectId
//   title         String
//   description   String
//   imageSrc      String
//   createdAt     DateTime @default(now())
//   category      String
//   roomCount     Int
//   bathroomCount Int
//   guestCount    Int
//   locationValue String
//   userId        String   @db.ObjectId
//   price         Int

//   user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
//   reservations Reservation[]
// }

// model Reservation {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId     String   @db.ObjectId
//   listingId  String   @db.ObjectId
//   startDate  DateTime
//   endDate    DateTime
//   totalPrice Int
//   createdAt  DateTime @default(now())

//   user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
// }
